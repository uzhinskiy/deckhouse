diff --git a/pkg/ipam/hostscope.go b/pkg/ipam/hostscope.go
index 7c86293a74..b17b106a7c 100644
--- a/pkg/ipam/hostscope.go
+++ b/pkg/ipam/hostscope.go
@@ -7,8 +7,10 @@ import (
 	"fmt"
 	"math/big"
 	"net"
+	"strings"
 
 	"github.com/cilium/cilium/pkg/ip"
+	"github.com/cilium/cilium/pkg/k8s/watchers"
 
 	"github.com/cilium/ipam/service/ipallocator"
 )
@@ -16,9 +18,12 @@ import (
 type hostScopeAllocator struct {
 	allocCIDR *net.IPNet
 	allocator *ipallocator.Range
+
+	// for k8s lister
+	k8swatcher *watchers.K8sWatcher
 }
 
-func newHostScopeAllocator(n *net.IPNet) Allocator {
+func newHostScopeAllocator(n *net.IPNet, k8sEventReg K8sEventRegister) Allocator {
 	cidrRange, err := ipallocator.NewCIDRRange(n)
 	if err != nil {
 		panic(err)
@@ -27,6 +32,7 @@ func newHostScopeAllocator(n *net.IPNet) Allocator {
 		allocCIDR: n,
 		allocator: cidrRange,
 	}
+	a.k8swatcher, _ = k8sEventReg.(*watchers.K8sWatcher)
 
 	return a
 }
@@ -52,11 +58,29 @@ func (h *hostScopeAllocator) Release(ip net.IP) error {
 }
 
 func (h *hostScopeAllocator) AllocateNext(owner string) (*AllocationResult, error) {
+	if h.k8swatcher != nil {
+		names := strings.Split(owner, "/")
+		pod, err := h.k8swatcher.GetCachedPod(names[0], names[1])
+		if err != nil {
+			return nil, fmt.Errorf("get pod %s info failed %v. ", owner, err)
+		}
+		if pod.Annotations != nil && pod.Annotations[customPodIpAddr] != "" {
+			ip := net.ParseIP(pod.Annotations[customPodIpAddr])
+			if ip == nil {
+				return nil, fmt.Errorf("customer invalid ip: %s. ", pod.Annotations[customPodIpAddr])
+			}
+			err = h.allocator.Allocate(ip)
+			if err != nil {
+				return nil, fmt.Errorf("customer ip is not avaliable %s: %w", ip.String(), err)
+			}
+			return &AllocationResult{IP: ip}, nil
+		}
+	}
+
 	ip, err := h.allocator.AllocateNext()
 	if err != nil {
 		return nil, err
 	}
-
 	return &AllocationResult{IP: ip}, nil
 }
 
diff --git a/pkg/ipam/ipam.go b/pkg/ipam/ipam.go
index 76225125e3..a9bc3842db 100644
--- a/pkg/ipam/ipam.go
+++ b/pkg/ipam/ipam.go
@@ -104,11 +104,11 @@ func NewIPAM(nodeAddressing datapath.NodeAddressing, c Configuration, owner Owne
 		}).Infof("Initializing %s IPAM", c.IPAMMode())
 
 		if c.IPv6Enabled() {
-			ipam.IPv6Allocator = newHostScopeAllocator(nodeAddressing.IPv6().AllocationCIDR().IPNet)
+			ipam.IPv6Allocator = newHostScopeAllocator(nodeAddressing.IPv6().AllocationCIDR().IPNet, k8sEventReg)
 		}
 
 		if c.IPv4Enabled() {
-			ipam.IPv4Allocator = newHostScopeAllocator(nodeAddressing.IPv4().AllocationCIDR().IPNet)
+			ipam.IPv4Allocator = newHostScopeAllocator(nodeAddressing.IPv4().AllocationCIDR().IPNet, k8sEventReg)
 		}
 	case ipamOption.IPAMCRD, ipamOption.IPAMENI, ipamOption.IPAMAzure, ipamOption.IPAMAlibabaCloud:
 		log.Info("Initializing CRD-based IPAM")
diff --git a/pkg/ipam/types.go b/pkg/ipam/types.go
index c85f0373cb..f1ec779215 100644
--- a/pkg/ipam/types.go
+++ b/pkg/ipam/types.go
@@ -12,6 +12,10 @@ import (
 	"github.com/davecgh/go-spew/spew"
 )
 
+const (
+	customPodIpAddr = "cni.cilium.io/ipAddrs"
+)
+
 // AllocationResult is the result of an allocation
 type AllocationResult struct {
 	// IP is the allocated IP
